package alwayshot

// See: https://freeslotshub.com/novomatic/always-hot/

import (
	"math"

	"github.com/slotopol/server/game"
)

// reels lengths [36, 36, 36], total reshuffles 46656
// RTP = 79.963992%
var Reels80 = game.Reels3x{
	{5, 5, 5, 4, 4, 4, 2, 3, 6, 6, 6, 1, 1, 1, 7, 7, 7, 2, 2, 2, 8, 8, 8, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
	{5, 5, 5, 4, 4, 4, 2, 3, 6, 6, 6, 1, 1, 1, 7, 7, 7, 2, 2, 2, 8, 8, 8, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
	{5, 5, 5, 4, 4, 4, 2, 3, 6, 6, 6, 1, 1, 1, 7, 7, 7, 2, 2, 2, 8, 8, 8, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
}

// reels lengths [35, 35, 35], total reshuffles 42875
// RTP = 85.289796%
var Reels85 = game.Reels3x{
	{5, 5, 5, 4, 4, 4, 2, 6, 6, 6, 1, 1, 1, 7, 7, 7, 2, 2, 2, 8, 8, 8, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
	{5, 5, 5, 4, 4, 4, 2, 6, 6, 6, 1, 1, 1, 7, 7, 7, 2, 2, 2, 8, 8, 8, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
	{5, 5, 5, 4, 4, 4, 2, 6, 6, 6, 1, 1, 1, 7, 7, 7, 2, 2, 2, 8, 8, 8, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
}

// reels lengths [42, 42, 42], total reshuffles 74088
// RTP = 88.127632%
var Reels88 = game.Reels3x{
	{5, 5, 5, 1, 4, 4, 4, 2, 3, 6, 6, 6, 4, 3, 1, 1, 1, 2, 7, 7, 7, 2, 2, 2, 8, 8, 8, 2, 5, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
	{5, 5, 5, 1, 4, 4, 4, 2, 3, 6, 6, 6, 4, 3, 1, 1, 1, 2, 7, 7, 7, 2, 2, 2, 8, 8, 8, 2, 5, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
	{5, 5, 5, 1, 4, 4, 4, 2, 3, 6, 6, 6, 4, 3, 1, 1, 1, 2, 7, 7, 7, 2, 2, 2, 8, 8, 8, 2, 5, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
}

// reels lengths [45, 45, 45], total reshuffles 91125
// RTP = 90.723731%
var Reels91 = game.Reels3x{
	{5, 5, 5, 1, 3, 4, 4, 4, 2, 3, 1, 6, 6, 6, 4, 3, 1, 1, 1, 2, 7, 7, 7, 3, 2, 2, 2, 8, 8, 8, 2, 5, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
	{5, 5, 5, 1, 3, 4, 4, 4, 2, 3, 1, 6, 6, 6, 4, 3, 1, 1, 1, 2, 7, 7, 7, 3, 2, 2, 2, 8, 8, 8, 2, 5, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
	{5, 5, 5, 1, 3, 4, 4, 4, 2, 3, 1, 6, 6, 6, 4, 3, 1, 1, 1, 2, 7, 7, 7, 3, 2, 2, 2, 8, 8, 8, 2, 5, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
}

// reels lengths [39, 39, 39], total reshuffles 59319
// RTP = 93.440550%
var Reels93 = game.Reels3x{
	{5, 5, 5, 1, 4, 4, 4, 2, 3, 6, 6, 6, 3, 1, 1, 1, 2, 7, 7, 7, 2, 2, 2, 8, 8, 8, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
	{5, 5, 5, 1, 4, 4, 4, 2, 3, 6, 6, 6, 3, 1, 1, 1, 2, 7, 7, 7, 2, 2, 2, 8, 8, 8, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
	{5, 5, 5, 1, 4, 4, 4, 2, 3, 6, 6, 6, 3, 1, 1, 1, 2, 7, 7, 7, 2, 2, 2, 8, 8, 8, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
}

// reels lengths [44, 44, 44], total reshuffles 85184
// RTP = 94.069309%
var Reels94 = game.Reels3x{
	{5, 5, 5, 1, 3, 4, 4, 4, 2, 3, 1, 6, 6, 6, 4, 3, 1, 1, 1, 2, 7, 7, 7, 2, 2, 2, 8, 8, 8, 2, 5, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
	{5, 5, 5, 1, 3, 4, 4, 4, 2, 3, 1, 6, 6, 6, 4, 3, 1, 1, 1, 2, 7, 7, 7, 2, 2, 2, 8, 8, 8, 2, 5, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
	{5, 5, 5, 1, 3, 4, 4, 4, 2, 3, 1, 6, 6, 6, 4, 3, 1, 1, 1, 2, 7, 7, 7, 2, 2, 2, 8, 8, 8, 2, 5, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
}

// reels lengths [46, 46, 46], total reshuffles 97336
// RTP = 96.071341%
var Reels96 = game.Reels3x{
	{5, 5, 5, 1, 3, 4, 4, 4, 2, 3, 1, 6, 6, 6, 2, 4, 3, 1, 1, 1, 2, 7, 7, 7, 3, 2, 2, 2, 8, 8, 8, 2, 5, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
	{5, 5, 5, 1, 3, 4, 4, 4, 2, 3, 1, 6, 6, 6, 2, 4, 3, 1, 1, 1, 2, 7, 7, 7, 3, 2, 2, 2, 8, 8, 8, 2, 5, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
	{5, 5, 5, 1, 3, 4, 4, 4, 2, 3, 1, 6, 6, 6, 2, 4, 3, 1, 1, 1, 2, 7, 7, 7, 3, 2, 2, 2, 8, 8, 8, 2, 5, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
}

// reels lengths [38, 38, 38], total reshuffles 54872
// RTP = 98.789911%
var Reels99 = game.Reels3x{
	{5, 5, 5, 1, 4, 4, 4, 2, 3, 6, 6, 6, 1, 1, 1, 2, 7, 7, 7, 2, 2, 2, 8, 8, 8, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
	{5, 5, 5, 1, 4, 4, 4, 2, 3, 6, 6, 6, 1, 1, 1, 2, 7, 7, 7, 2, 2, 2, 8, 8, 8, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
	{5, 5, 5, 1, 4, 4, 4, 2, 3, 6, 6, 6, 1, 1, 1, 2, 7, 7, 7, 2, 2, 2, 8, 8, 8, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
}

// reels lengths [46, 46, 46], total reshuffles 97336
// RTP = 110.166845%
var Reels110 = game.Reels3x{
	{5, 5, 5, 1, 4, 4, 4, 2, 3, 1, 6, 6, 6, 2, 4, 3, 1, 1, 1, 2, 7, 7, 7, 3, 2, 2, 2, 1, 8, 8, 8, 2, 5, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
	{5, 5, 5, 1, 4, 4, 4, 2, 3, 1, 6, 6, 6, 2, 4, 3, 1, 1, 1, 2, 7, 7, 7, 3, 2, 2, 2, 1, 8, 8, 8, 2, 5, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
	{5, 5, 5, 1, 4, 4, 4, 2, 3, 1, 6, 6, 6, 2, 4, 3, 1, 1, 1, 2, 7, 7, 7, 3, 2, 2, 2, 1, 8, 8, 8, 2, 5, 3, 3, 3, 1, 9, 9, 9, 2, 2, 2, 1, 1, 1},
}

// Map with available reels.
var ReelsMap = map[float64]*game.Reels3x{
	79.963992:  &Reels80,
	85.289796:  &Reels85,
	88.127632:  &Reels88,
	90.723731:  &Reels91,
	93.440550:  &Reels93,
	94.069309:  &Reels94,
	96.071341:  &Reels96,
	98.789911:  &Reels99,
	110.166845: &Reels110,
}

func FindReels(mrtp float64) (rtp float64, reels game.Reels) {
	for p, r := range ReelsMap {
		if math.Abs(mrtp-p) < math.Abs(mrtp-rtp) {
			rtp, reels = p, r
		}
	}
	return
}

// Lined payment.
var LinePay = [9][3]float64{
	{0, 0, 60}, // 1 seven
	{0, 0, 40}, // 2 star
	{0, 0, 20}, // 3 melon
	{0, 0, 16}, // 4 grapes
	{0, 0, 16}, // 5 bell
	{0, 0, 8},  // 6 orange
	{0, 0, 8},  // 7 plum
	{0, 0, 8},  // 8 lemon
	{0, 0, 8},  // 9 cherry
}

type Game struct {
	game.Slot3x3 `yaml:",inline"`
}

func NewGame(rtp float64) *Game {
	return &Game{
		Slot3x3: game.Slot3x3{
			RTP: rtp,
			SBL: game.MakeBitNum(5),
			Bet: 1,
		},
	}
}

func (g *Game) Scanner(screen game.Screen, wins *game.Wins) {
	var bl = game.BetLinesHot3
	for li := g.SBL.Next(0); li != 0; li = g.SBL.Next(li) {
		var line = bl.Line(li)
		var sym1, sym2, sym3 = screen.Pos(1, line), screen.Pos(2, line), screen.Pos(3, line)
		if sym1 == sym2 && sym1 == sym3 {
			*wins = append(*wins, game.WinItem{
				Pay:  g.Bet * LinePay[sym1-1][2],
				Mult: 1,
				Sym:  sym1,
				Num:  3,
				Line: li,
				XY:   line.CopyL(3),
			})
		}
	}
}

func (g *Game) Spin(screen game.Screen) {
	var _, reels = FindReels(g.RTP)
	screen.Spin(reels)
}

func (g *Game) SetLines(sbl game.Bitset) error {
	return game.ErrNoFeature
}
