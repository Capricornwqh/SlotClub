package beetlemania

import (
	"github.com/slotopol/server/game"
)

var ReelsReg88 = game.Reels5x{
	{8, 6, 10, 8, 9, 1, 7, 5, 6, 1, 7, 5, 3, 8, 4, 6, 8, 2, 8, 6, 8, 1, 9, 6, 2, 8, 4, 8, 6, 3, 7, 5},
	{9, 7, 10, 9, 5, 7, 1, 5, 6, 3, 9, 4, 7, 9, 2, 9, 6, 5, 1, 8, 7, 3, 5, 9, 1, 6, 8, 9, 7, 8, 9, 4},
	{4, 5, 10, 7, 9, 3, 8, 11, 5, 9, 6, 1, 5, 8, 4, 5, 3, 6, 7, 11, 8, 6, 10, 5, 7, 2, 9, 7, 4, 6, 2, 7},
	{7, 5, 10, 9, 8, 5, 1, 7, 9, 2, 7, 5, 10, 9, 8, 6, 4, 8, 6, 5, 3, 8, 6, 4, 5, 6, 7, 4, 9, 5, 2, 8},
	{5, 7, 10, 9, 5, 3, 9, 7, 6, 1, 8, 5, 3, 9, 4, 7, 6, 1, 8, 5, 9, 4, 8, 9, 6, 2, 8, 6, 4, 8, 3, 9},
}

var ReelsReg90 = game.Reels5x{
	{8, 6, 10, 8, 9, 1, 7, 5, 6, 1, 7, 5, 3, 7, 4, 6, 8, 2, 9, 6, 8, 1, 9, 6, 2, 8, 4, 8, 6, 3, 7, 5},
	{9, 7, 10, 9, 5, 7, 1, 5, 6, 3, 9, 4, 7, 8, 2, 9, 6, 5, 1, 8, 7, 3, 5, 9, 1, 6, 8, 9, 7, 8, 9, 4},
	{4, 5, 10, 7, 9, 3, 8, 11, 5, 9, 6, 1, 5, 8, 4, 5, 3, 6, 7, 11, 8, 6, 10, 5, 7, 2, 9, 7, 4, 6, 2, 7},
	{7, 5, 10, 9, 8, 5, 1, 7, 9, 2, 7, 5, 10, 9, 8, 6, 4, 8, 6, 5, 3, 8, 6, 4, 5, 6, 7, 4, 9, 5, 2, 8},
	{5, 7, 10, 9, 5, 3, 9, 7, 6, 1, 8, 5, 3, 9, 4, 7, 6, 1, 8, 5, 9, 4, 8, 9, 6, 2, 8, 6, 4, 8, 3, 9},
}

var ReelsReg92 = game.Reels5x{
	{8, 6, 10, 8, 9, 1, 7, 5, 6, 1, 7, 5, 3, 8, 4, 6, 8, 2, 8, 6, 8, 1, 9, 6, 2, 8, 4, 8, 6, 3, 7, 5},
	{9, 7, 10, 9, 5, 7, 1, 5, 6, 3, 9, 4, 7, 9, 2, 9, 6, 5, 1, 8, 7, 3, 5, 9, 1, 6, 8, 9, 7, 10, 9, 4},
	{4, 5, 10, 7, 9, 3, 8, 11, 5, 9, 6, 1, 5, 8, 4, 5, 3, 6, 7, 11, 8, 6, 9, 5, 7, 2, 9, 7, 4, 6, 2, 7},
	{7, 5, 10, 9, 8, 5, 1, 7, 9, 2, 7, 5, 10, 9, 8, 6, 4, 8, 6, 5, 3, 8, 6, 4, 5, 6, 7, 4, 9, 5, 2, 8},
	{5, 7, 9, 5, 3, 9, 7, 6, 1, 8, 5, 3, 9, 4, 7, 6, 1, 8, 5, 9, 4, 8, 9, 6, 2, 8, 6, 4, 8, 3, 9},
}

var ReelsReg94 = game.Reels5x{
	{8, 6, 10, 8, 9, 1, 7, 5, 6, 1, 7, 5, 3, 8, 4, 6, 8, 2, 8, 6, 8, 1, 9, 6, 2, 8, 4, 9, 6, 3, 7, 5},
	{8, 7, 10, 9, 5, 7, 1, 5, 6, 3, 9, 4, 7, 8, 2, 9, 6, 5, 1, 8, 7, 3, 5, 9, 1, 6, 8, 9, 7, 10, 9, 4},
	{4, 5, 10, 7, 9, 3, 8, 11, 5, 9, 6, 1, 5, 8, 4, 5, 3, 6, 7, 11, 8, 6, 9, 5, 7, 2, 9, 7, 4, 6, 2, 7},
	{7, 5, 10, 9, 8, 5, 1, 7, 9, 2, 7, 5, 10, 9, 8, 6, 4, 8, 6, 5, 3, 8, 6, 4, 5, 6, 7, 4, 9, 5, 2, 8},
	{5, 7, 10, 9, 5, 3, 9, 7, 6, 1, 8, 5, 3, 9, 4, 7, 6, 1, 8, 5, 9, 4, 8, 9, 6, 2, 8, 6, 4, 8, 3, 9},
}

var ReelsReg95 = game.Reels5x{
	{8, 6, 10, 8, 9, 1, 7, 5, 6, 1, 7, 5, 3, 9, 4, 6, 8, 2, 7, 6, 8, 1, 9, 6, 2, 8, 4, 9, 6, 3, 7, 5},
	{8, 7, 10, 9, 5, 7, 1, 5, 6, 3, 9, 4, 7, 8, 2, 9, 6, 5, 1, 8, 7, 3, 5, 9, 1, 6, 8, 9, 7, 10, 9, 4},
	{4, 5, 10, 7, 9, 3, 8, 11, 5, 9, 6, 1, 5, 8, 4, 5, 3, 6, 7, 11, 8, 6, 9, 5, 7, 2, 9, 7, 4, 6, 2, 7},
	{7, 5, 10, 9, 8, 5, 1, 7, 9, 2, 7, 5, 10, 9, 8, 6, 4, 8, 6, 5, 3, 8, 6, 4, 5, 6, 7, 4, 9, 5, 2, 8},
	{5, 7, 10, 9, 5, 3, 9, 7, 6, 1, 8, 5, 3, 9, 4, 7, 6, 1, 8, 5, 9, 4, 8, 9, 6, 2, 8, 6, 4, 8, 3, 9},
}

var ReelsReg96 = game.Reels5x{
	{8, 6, 10, 8, 9, 1, 7, 5, 6, 1, 7, 5, 3, 8, 4, 6, 8, 2, 8, 6, 8, 1, 9, 6, 2, 8, 4, 9, 6, 3, 7, 5},
	{8, 7, 10, 9, 5, 7, 1, 5, 6, 3, 9, 4, 7, 8, 2, 9, 6, 5, 1, 8, 7, 3, 5, 9, 1, 6, 8, 9, 7, 10, 9, 4},
	{4, 5, 10, 7, 9, 3, 8, 11, 5, 9, 6, 1, 5, 8, 4, 5, 3, 6, 7, 11, 8, 6, 9, 5, 7, 2, 9, 7, 4, 6, 2, 7},
	{7, 5, 10, 9, 8, 5, 1, 7, 9, 2, 7, 5, 10, 9, 8, 6, 4, 8, 6, 5, 3, 8, 6, 4, 5, 6, 7, 4, 9, 5, 2, 8},
	{5, 7, 10, 9, 5, 10, 9, 7, 6, 1, 8, 5, 3, 9, 4, 7, 6, 1, 8, 5, 9, 8, 4, 8, 9, 2, 8, 6, 4, 8, 3, 9},
}

var ReelsReg97 = game.Reels5x{
	{8, 6, 10, 8, 9, 1, 7, 5, 6, 1, 7, 5, 3, 8, 4, 6, 9, 2, 7, 6, 8, 1, 9, 6, 2, 8, 4, 9, 6, 3, 7, 5},
	{8, 7, 10, 9, 5, 7, 1, 5, 6, 3, 9, 4, 7, 8, 2, 9, 6, 5, 1, 8, 7, 3, 5, 9, 1, 6, 8, 9, 7, 10, 9, 4},
	{4, 5, 10, 7, 9, 3, 8, 11, 5, 9, 6, 1, 5, 8, 4, 5, 3, 6, 7, 11, 8, 6, 9, 5, 7, 2, 9, 7, 4, 6, 2, 7},
	{7, 5, 10, 9, 8, 5, 1, 7, 9, 2, 7, 5, 10, 9, 8, 6, 4, 8, 6, 5, 3, 8, 6, 4, 5, 6, 7, 4, 9, 5, 2, 8},
	{5, 7, 10, 9, 5, 10, 9, 7, 6, 1, 8, 5, 3, 9, 4, 7, 6, 1, 8, 5, 9, 8, 4, 8, 9, 2, 8, 6, 4, 8, 3, 9},
}

var ReelsReg100 = game.Reels5x{
	{8, 6, 10, 8, 9, 1, 7, 5, 6, 1, 7, 5, 3, 8, 4, 5, 9, 2, 7, 6, 8, 1, 9, 6, 2},
	{8, 7, 10, 9, 5, 7, 1, 5, 6, 3, 9, 4, 7, 8, 2, 9, 6, 5, 1, 8, 7, 6, 5, 9, 1},
	{4, 9, 10, 7, 9, 3, 8, 11, 5, 9, 6, 1, 5, 8, 7, 6, 3, 6, 7, 11, 8, 6, 5, 2, 7},
	{7, 5, 10, 9, 8, 5, 1, 7, 9, 2, 7, 6, 2, 9, 8, 6, 9, 8, 6, 5, 3, 8, 7, 4, 6},
	{5, 7, 10, 9, 5, 2, 9, 7, 6, 1, 8, 5, 3, 9, 4, 7, 6, 1, 8, 5, 9, 8, 4, 8, 9},
}

var ReelsBon = game.Reels5x{
	{8, 6, 10, 8, 9, 1, 7, 5, 6, 9, 7, 5, 3, 8, 4, 7, 9, 2, 7, 9, 5, 7, 9, 5, 2, 8, 4, 9, 8, 7, 8, 5, 9, 7, 8, 9, 8, 6, 10, 8, 9, 7, 3, 5, 7},
	{8, 7, 10, 9, 5, 7, 1, 5, 6, 3, 9, 4, 7, 8, 2, 9, 6, 5, 4, 8, 7, 3, 5, 9, 7, 6, 8, 9, 7, 10, 9, 4, 7, 5, 6, 8, 5, 7, 10, 9, 5, 6, 7, 9, 6},
	{4, 8, 10, 7, 9, 3, 8, 11, 5, 9, 6, 1, 5, 8, 7, 5, 3, 6, 7, 11, 8, 6, 9, 8, 7, 2, 9, 7, 6, 9, 8, 6},
	{7, 5, 10, 9, 8, 5, 1, 7, 9, 2, 8, 5, 1, 7, 9, 5, 8, 9, 6, 5, 3, 8, 6, 5, 4, 6, 5, 7, 4, 5, 9, 2},
	{5, 7, 10, 9, 5, 2, 9, 7, 6, 1, 5, 5, 3, 9, 4, 7, 6, 1, 8, 5, 9, 7, 8, 9, 7, 2, 6, 7, 4, 5, 3, 9},
}

var ReelsReg88u = game.Reels5x{
	{7, 2, 5, 7, 3, 6, 8, 9, 4, 6, 8, 1, 8, 7, 2, 6, 5, 8, 4, 8, 7, 3, 5, 7, 8, 1, 6, 9, 10, 9},
	{10, 5, 7, 4, 7, 6, 2, 7, 6, 9, 1, 5, 9, 8, 3, 8, 9, 3, 8, 5, 7, 4, 9, 9, 1, 6, 5, 8, 7, 9},
	{6, 10, 7, 8, 4, 6, 1, 5, 2, 9, 4, 9, 5, 7, 11, 6, 8, 2, 9, 3, 5, 4, 6, 7, 1, 8, 9, 11, 7, 9, 3, 5},
	{10, 5, 7, 4, 8, 7, 2, 8, 9, 3, 9, 7, 8, 4, 5, 6, 10, 5, 7, 2, 9, 8, 1, 8, 9, 4, 9, 5, 8, 7, 6, 9},
	{10, 7, 6, 4, 5, 8, 2, 5, 8, 3, 6, 5, 4, 5, 2, 6, 7, 10, 8, 9, 2, 6, 7, 1, 6, 7, 1, 8, 6, 4, 7, 9},
}

var ReelsReg90u = game.Reels5x{
	{10, 7, 9, 2, 6, 8, 3, 7, 5, 4, 9, 8, 1, 7, 8, 3, 5, 6, 1, 8, 6, 2, 7, 6, 4, 8, 6, 7, 8, 9},
	{10, 7, 5, 3, 6, 7, 1, 8, 9, 2, 7, 8, 4, 6, 7, 1, 5, 9, 3, 5, 8, 9, 4, 5, 9, 5, 8, 9, 7, 9},
	{10, 6, 9, 2, 5, 7, 11, 6, 8, 1, 6, 9, 4, 5, 6, 10, 8, 9, 11, 7, 6, 2, 5, 9, 3, 5, 4, 9, 3, 1, 5, 6},
	{10, 5, 7, 2, 9, 8, 3, 8, 9, 4, 9, 8, 3, 5, 6, 1, 7, 5, 2, 9, 7, 3, 8, 7, 2, 8, 4, 7, 2, 8, 6, 9},
	{10, 7, 6, 3, 5, 8, 4, 6, 7, 10, 8, 9, 2, 6, 1, 7, 4, 7, 3, 5, 8, 4, 6, 2, 5, 3, 8, 2, 1, 5, 7, 9},
}

var ReelsReg92u = game.Reels5x{
	{10, 7, 9, 2, 9, 6, 1, 9, 8, 3, 6, 5, 1, 8, 9, 4, 6, 8, 5, 6, 3, 8, 7, 4, 7, 4, 5, 2, 5, 9},
	{10, 7, 5, 2, 7, 8, 1, 6, 7, 3, 5, 8, 4, 6, 7, 1, 8, 9, 4, 5, 6, 8, 5, 3, 6, 8, 2, 9, 8, 9},
	{7, 5, 2, 6, 3, 9, 1, 5, 2, 6, 4, 5, 7, 11, 6, 9, 4, 9, 3, 7, 4, 5, 3, 9, 7, 1, 8, 6, 10, 8, 9, 11},
	{10, 5, 7, 3, 8, 6, 1, 7, 6, 10, 9, 8, 7, 2, 9, 8, 3, 7, 8, 4, 8, 9, 4, 5, 7, 8, 5, 7, 8, 7, 9, 6},
	{10, 8, 9, 2, 6, 7, 1, 9, 7, 3, 8, 4, 5, 8, 3, 7, 9, 10, 7, 6, 4, 5, 8, 1, 9, 5, 3, 7, 8, 2, 6, 7},
}

var ReelsReg94u = game.Reels5x{
	{10, 7, 9, 3, 6, 7, 1, 8, 9, 2, 7, 5, 1, 7, 8, 4, 7, 3, 6, 4, 8, 9, 2, 5, 3, 9, 4, 9, 8, 9},
	{10, 5, 7, 2, 6, 7, 1, 8, 9, 4, 8, 5, 3, 7, 5, 1, 7, 6, 2, 5, 6, 3, 6, 5, 4, 6, 8, 6, 9, 7},
	{10, 8, 7, 4, 8, 9, 11, 7, 6, 3, 6, 8, 1, 5, 9, 2, 5, 7, 11, 6, 8, 10, 9, 5, 2, 5, 4, 6, 5, 1, 5, 9},
	{10, 5, 7, 8, 5, 6, 1, 7, 5, 3, 8, 6, 4, 8, 6, 7, 4, 9, 8, 7, 9, 2, 8, 9, 5, 4, 8, 9, 8, 9, 6, 9},
	{10, 7, 6, 2, 6, 7, 1, 9, 7, 3, 9, 8, 3, 6, 7, 1, 9, 5, 4, 8, 6, 2, 8, 9, 6, 4, 8, 9, 5, 8, 7, 9},
}

var ReelsReg96u = game.Reels5x{
	{10, 7, 8, 2, 8, 7, 1, 8, 7, 3, 5, 6, 4, 8, 7, 2, 6, 8, 4, 6, 5, 1, 9, 5, 6, 4, 9, 5, 8, 6},
	{10, 5, 7, 3, 9, 8, 1, 6, 9, 2, 8, 9, 10, 9, 8, 4, 8, 6, 3, 9, 6, 4, 9, 8, 1, 5, 9, 3, 9, 7},
	{10, 9, 7, 2, 8, 9, 11, 7, 6, 3, 5, 6, 4, 5, 7, 11, 6, 8, 2, 7, 5, 3, 6, 5, 1, 7, 5, 3, 7, 1, 5, 9},
	{10, 5, 7, 3, 8, 6, 1, 7, 8, 2, 8, 9, 4, 6, 9, 10, 8, 9, 4, 8, 7, 3, 5, 9, 2, 8, 7, 4, 9, 8, 9, 7},
	{10, 5, 7, 9, 6, 7, 1, 9, 7, 2, 5, 7, 3, 8, 6, 7, 1, 9, 7, 9, 6, 5, 8, 3, 8, 5, 4, 9, 5, 6, 7, 5},
}

var ReelsBonu = game.Reels5x{
	{10, 9, 5, 7, 6, 5, 7, 8, 9, 2, 7, 8, 6, 7, 10, 8, 9, 7, 3, 9, 8, 2, 9, 8, 3, 6, 7, 8, 9, 8, 10, 7, 9, 4, 5, 6, 9, 7, 4, 8, 9, 1, 7, 9, 6},
	{7, 5, 9, 4, 5, 6, 7, 10, 8, 9, 2, 7, 6, 7, 5, 10, 8, 7, 4, 6, 7, 3, 8, 9, 5, 4, 5, 6, 8, 7, 10, 6, 7, 8, 3, 9, 7, 8, 4, 9, 5, 6, 7, 9, 1},
	{8, 5, 3, 9, 5, 8, 6, 10, 9, 7, 2, 8, 9, 11, 7, 6, 5, 8, 3, 9, 8, 4, 5, 7, 11, 6, 8, 9, 5, 1, 8, 7},
	{8, 6, 9, 4, 5, 6, 10, 7, 5, 2, 8, 9, 3, 5, 6, 1, 5, 7, 8, 4, 5, 6, 2, 9, 5, 3, 6, 9, 1, 5, 7, 6, 3},
	{10, 9, 7, 4, 5, 6, 7, 1, 8, 9, 2, 6, 3, 7, 8, 3, 9, 8, 4, 5, 6, 2, 9, 8, 6, 3, 7, 9, 1, 7, 6, 7},
}

// Map with available reels.
var ReelsMap = map[string]*game.Reels5x{
	"88":   &ReelsReg88,
	"90":   &ReelsReg90,
	"92":   &ReelsReg92,
	"94":   &ReelsReg94,
	"95":   &ReelsReg95,
	"96":   &ReelsReg96,
	"97":   &ReelsReg97,
	"100":  &ReelsReg100,
	"bon":  &ReelsBon,
	"88u":  &ReelsReg88u,
	"90u":  &ReelsReg90u,
	"92u":  &ReelsReg92u,
	"94u":  &ReelsReg94u,
	"96u":  &ReelsReg96u,
	"bonu": &ReelsBonu,
}

// Lined payment.
var LinePay = [11][5]int{
	{0, 10, 80, 1000, 5000}, //  1 bee
	{0, 5, 30, 200, 1000},   //  2 snail
	{0, 5, 25, 100, 500},    //  3 fly
	{0, 5, 15, 65, 250},     //  4 worm
	{0, 0, 10, 40, 200},     //  5 ace
	{0, 0, 10, 40, 200},     //  6 king
	{0, 0, 5, 20, 100},      //  7 queen
	{0, 0, 5, 20, 100},      //  8 jack
	{0, 0, 5, 20, 100},      //  9 ten
	{0, 0, 0, 0, 0},         // 10 note
	{0, 0, 0, 0, 0},         // 11 jazzbee
}

// Scatters payment.
var ScatPay = [5]int{0, 0, 2, 15, 50} // 10 note

const (
	jid = 1 // jackpot ID
)

// Jackpot win combinations.
var Jackpot = [11][5]int{
	{0, 0, 0, 0, 0}, //  1 bee
	{0, 0, 0, 0, 0}, //  2 snail
	{0, 0, 0, 0, 0}, //  3 fly
	{0, 0, 0, 0, 0}, //  4 worm
	{0, 0, 0, 0, 0}, //  5 ace
	{0, 0, 0, 0, 0}, //  6 king
	{0, 0, 0, 0, 0}, //  7 queen
	{0, 0, 0, 0, 0}, //  8 jack
	{0, 0, 0, 0, 0}, //  9 ten
	{0, 0, 0, 0, 0}, // 10 note
	{0, 0, 0, 0, 0}, // 11 jazzbee
}

type Game struct {
	game.Slot5x3 `yaml:",inline"`
	FS           int `json:"fs" yaml:"fs" xml:"fs"` // free spin number
}

func NewGame(ri string) *Game {
	return &Game{
		Slot5x3: game.Slot5x3{
			RI:  ri,
			BLI: "nvm10",
			SBL: game.MakeSBL(1),
			Bet: 1,
		},
		FS: 0,
	}
}

const wild, scat = 1, 10
const jazz = 11

func (g *Game) Scanner(screen game.Screen, ws *game.WinScan) {
	g.ScanLined(screen, ws)
	g.ScanScatters(screen, ws)
}

// Lined symbols calculation.
func (g *Game) ScanLined(screen game.Screen, ws *game.WinScan) {
	var mm = 1
	if g.FS > 0 && (screen.At(3, 1) == jazz || screen.At(3, 2) == jazz || screen.At(3, 3) == jazz) {
		mm = 2
	}

	var bl = game.BetLines5x[g.BLI]
	for li := g.SBL.Next(0); li != 0; li = g.SBL.Next(li) {
		var line = bl.Line(li)
		var iwin game.WinItem

		var wsc [5]game.Sym
		for x := 1; x <= 5; x++ {
			var sx = screen.At(x, line.At(x))
			wsc[x-1] = sx
			if sx != wild {
				break
			}
		}

		for _, sc := range wsc {
			if sc == 0 {
				break
			}
			var count = 0
			for x := 1; x <= 5; x++ {
				var sx = screen.At(x, line.At(x))
				if sx == sc {
					count++
				} else if sx == wild && sc != scat {
					count++
				} else {
					break
				}
			}
			if count > 0 {
				if pay := LinePay[sc-1][count-1]; pay > 0 {
					if iwin.Pay < pay*g.Bet {
						var jwin = game.WinItem{
							Pay:  pay * g.Bet,
							Mult: mm,
							Sym:  sc,
							Num:  count,
							Line: li,
						}
						if jp := Jackpot[sc-1][count-1]; jp > 0 {
							jwin.Jack = jp
						}
						iwin = jwin
					}
				}
			}
		}

		if iwin.Pay > 0 {
			// Set xy-array
			var xy game.Line5x
			for x := 1; x <= iwin.Num; x++ {
				xy.Set(x, line.At(x))
			}
			// Insert win
			ws.Wins = append(ws.Wins, iwin)
		}
	}
}

// Scatters calculation.
func (g *Game) ScanScatters(screen game.Screen, ws *game.WinScan) {
	var xy game.Line5x
	var count = 0
	for x := 1; x <= 5; x++ {
		if screen.At(x, 1) == scat {
			xy.Set(x, 1)
		} else if screen.At(x, 2) == scat {
			xy.Set(x, 2)
		} else if screen.At(x, 3) == scat {
			xy.Set(x, 3)
		} else {
			break
		}
		count++
	}

	if count > 0 {
		if pay := ScatPay[count-1]; pay > 0 {
			ws.Wins = append(ws.Wins, game.WinItem{
				Pay:  g.Bet * pay, // independent from selected lines
				Mult: 1,           // jazzbee will never be near the note on reel
				Sym:  scat,
				Num:  count,
				XY:   &xy,
				Free: 10,
			})
		}
	}
}

func (g *Game) Spin(screen game.Screen) {
	if g.FS == 0 {
		screen.Spin(ReelsMap[g.RI])
	} else if g.RI[len(g.RI)-1:] == "u" {
		screen.Spin(&ReelsBonu)
	} else {
		screen.Spin(&ReelsBon)
	}
}

func (g *Game) Apply(screen game.Screen, sw *game.WinScan) {
	if g.FS > 0 {
		g.FS--
	}
	for _, wi := range sw.Wins {
		if wi.Free > 0 {
			g.FS += wi.Free
		}
	}
}

func (g *Game) FreeSpins() int {
	return g.FS
}
